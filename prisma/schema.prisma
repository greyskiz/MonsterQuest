generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tier {
  QUICK
  STANDARD
  LONG
}

enum Scope {
  SOLO
  PARTY
}

enum EncounterStatus {
  ONGOING
  PAUSED
  COMPLETED
  ABANDONED
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  passwordHash String
  role         String   @default("USER")
  displayName  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  encounters   Encounter[]
  defeats      UserMonsterDefeat[]
  participants EncounterParticipant[]

  @@index([username])
  @@index([email])
}

model MonsterTemplate {
  id        String   @id @default(uuid())
  name      String   @unique // prevent duplicate monster names
  tier      Tier
  scope     Scope
  minutes   Int
  baseCoins Int?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  encounters Encounter[]
  defeats    UserMonsterDefeat[]
}

model Encounter {
  id              String          @id @default(uuid())
  userId          String
  monsterId       String
  status          EncounterStatus // <â€” use enum not String
  startedAt       DateTime        @default(now())
  finishedAt      DateTime?
  plannedDuration Int // minutes planned for this session
  elapsed         Int             @default(0) // minutes elapsed (heartbeat)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  user    User                   @relation(fields: [userId], references: [id])
  monster MonsterTemplate        @relation(fields: [monsterId], references: [id])
  members EncounterParticipant[] 

  @@index([userId])
  @@index([monsterId])
  @@index([status])
}

model EncounterParticipant {
  id          String   @id @default(uuid())
  encounterId String
  userId      String
  joinedAt    DateTime @default(now())

  encounter Encounter @relation(fields: [encounterId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([encounterId, userId]) 
  @@index([userId])
  @@index([encounterId])
}

model UserMonsterDefeat {
  id         String   @id @default(uuid())
  userId     String
  monsterId  String
  defeatedAt DateTime @default(now())

  user     User            @relation(fields: [userId], references: [id])
  template MonsterTemplate @relation(fields: [monsterId], references: [id])

  @@unique([userId, monsterId]) 
  @@index([userId])
  @@index([monsterId])
}
